document.addEventListener("DOMContentLoaded", function() {
    console.log("‚úÖ DOM plnƒõ naƒçten!");

    if (window.location.pathname.includes("adjectiverating.html")) {
        const adjectiveDisplay = document.getElementById('adjectiveDisplay');
        if (!adjectiveDisplay) {
            console.error("‚ùå Element 'adjectiveDisplay' nebyl nalezen v DOMu!");
            return;
        }
        console.log("‚úÖ Element 'adjectiveDisplay' nalezen:", adjectiveDisplay);

        setupConfirmButton();
        setupEventListeners();
        
        // P≈ôid√°me event listenery pro v≈°echna rating tlaƒç√≠tka
        const ratingButtons = document.querySelectorAll('.rating-button');
        ratingButtons.forEach(button => {
            button.addEventListener('click', () => selectOption(button));
            button.addEventListener('touchstart', () => selectOption(button));
        });

        // P≈ôid√°n√≠ event listeneru pro tlaƒç√≠tko odesl√°n√≠ demografick√Ωch dat
        const submitDemographicButton = document.getElementById("submitDemographicButton");
        if (submitDemographicButton) {
            submitDemographicButton.addEventListener("click", saveUserData);
        }

        // Zav≈ôen√≠ modal okna
        const closeButton = document.getElementById('closeButton');
        const modal = document.getElementById('modal');

        if (closeButton && modal) {
            closeButton.addEventListener('click', function() {
                modal.style.display = 'none';
            });

            // Zav≈ôen√≠ modal p≈ôi kliknut√≠ mimo nƒõj
            window.addEventListener('click', function(event) {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }

        // Naƒçten√≠ slov z Firestore
        fetchAdjectives();
    }
});

// Import Firebase modules from CDN
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
import { getFirestore, collection, getDocs, updateDoc, increment, doc, addDoc } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js";

// Firebase configuration
const firebaseConfig = {
    apiKey: "AIzaSyC4H21ACGMoYAnK5_Rmy2l_Xb5mn4OwoSg",
    authDomain: "valencearousal.firebaseapp.com",
    projectId: "valencearousal",
    storageBucket: "valencearousal.appspot.com",
    messagingSenderId: "545440359385",
    appId: "1:545440359385:web:9c9855769597b27629900d",
    measurementId: "G-ER37JNBVFB"
};

// Initialize Firebase and Firestore
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

document.addEventListener("DOMContentLoaded", function() {
    let userId = localStorage.getItem("userId"); // Z√≠sk√°n√≠ u≈æivatelsk√©ho ID z LocalStorage

    if (!userId) {
        alert("Nebyl nalezen identifik√°tor √∫ƒçastn√≠ka. Pravdƒõpodobnƒõ jste p≈ôeskoƒçili dotazn√≠k.");
        window.location.href = "index.html";
    }
});

let currentWordIndex = 0;
const totalAdjectives = 15;
let words = [];
let currentValence = null;
let currentArousal = null;

// Ulo≈æen√≠ u≈æivatelsk√Ωch dat do Firestore
async function saveUserData() {
    const age = document.getElementById('age').value;
    const gender = document.getElementById('gender').value;
    const education = document.getElementById('education').value;
    const occupation = document.getElementById('occupation').value;
    const nativeLanguage = document.getElementById('nativeLanguage').value;

    if (age && gender && education && occupation && nativeLanguage) {
        try {
            const userRef = await addDoc(collection(db, "users"), {
                age,
                gender,
                education,
                occupation,
                nativeLanguage,
                timestamp: new Date().toISOString()
            });
            userId = userRef.id; // Ulo≈æen√≠ userId pro dal≈°√≠ pou≈æit√≠
            localStorage.setItem('userId', userId); // Ulo≈æen√≠ userId do LocalStorage
            window.location.href = 'adjectiverating.html'; // P≈ôesmƒõrov√°n√≠ na str√°nku hodnocen√≠
        } catch (error) {
            console.error("Chyba p≈ôi ukl√°d√°n√≠ do Firestore:", error);
        }
    } else {
        alert("Vypl≈àte v≈°echna pole.");
    }
}

// Naƒçten√≠ slov z Firestore
async function fetchAdjectives() {
    console.log("‚úÖ Naƒç√≠t√°m slova z Firestore...");
    try {
        const querySnapshot = await getDocs(collection(db, "adjectives"));
        console.log("üîç Z√≠skan√° data:", querySnapshot.docs.map(doc => doc.data())); // Debugging

        words = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        
        if (words.length === 0) {
            console.warn("‚ö†Ô∏è Nebyla naƒçtena ≈æ√°dn√° slova!");
            document.getElementById("adjectiveDisplay").innerHTML = "<h2>Chyba: Nebyla nalezena ≈æ√°dn√° slova.</h2>";
            return;
        }

        shuffleArray(words); // Zam√≠ch√°n√≠ slov
        displayWord();
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ slov:", error);
        document.getElementById("adjectiveDisplay").innerHTML = "<h2>Chyba p≈ôi naƒç√≠t√°n√≠ slov!</h2>";
    }
}

// Fisher-Yates m√≠ch√°n√≠ pole
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
}

// Zobrazen√≠ aktu√°ln√≠ho slova
function displayWord() {
    if (words.length === 0) {
        console.error("‚ùå ≈Ω√°dn√° slova nejsou naƒçtena!");
        document.getElementById("adjectiveDisplay").innerHTML = "<h2>≈Ω√°dn√° dostupn√° slova!</h2>";
        return;
    }

    if (currentWordIndex < totalAdjectives) {
        const wordObj = words[currentWordIndex];
        console.log(`üìù Zobrazuji slovo: ${wordObj.word}`);

        document.getElementById("adjectiveDisplay").innerHTML = `<h2>${wordObj.word}</h2>`;
        document.getElementById("progress-text").innerText = `${currentWordIndex + 1}/${totalAdjectives}`;
    } else {
        console.log("‚úÖ V≈°echna slova byla ohodnocena.");
        document.getElementById("adjectiveDisplay").innerHTML = `<h2>Dƒõkujeme za hodnocen√≠!</h2><p>Kontakt: Matias.Bunnik.s01@osu.cz</p>`;
        syncRatingsWithFirestore();
    }
}

// Hodnocen√≠ slov a ulo≈æen√≠ do LocalStorage
function rateWord(valence, arousal) {
    if (!userId) {
        alert("Nejprve vypl≈àte demografick√Ω dotazn√≠k.");
        return;
    }

    if (!valence || !arousal) {
        alert("Mus√≠te vybrat jak valenci, tak arousal.");
        return;
    }

    const word = words[currentWordIndex];
    const ratings = JSON.parse(localStorage.getItem("ratings")) || [];
    ratings.push({ 
        userId,
        wordId: word.id,
        word: word.word,
        valence, 
        arousal, 
        timestamp: new Date().toISOString() 
    });

    localStorage.setItem("ratings", JSON.stringify(ratings));

    console.log(`Ulo≈æeno: ${word.word} - Valence: ${valence}, Arousal: ${arousal}`);

    nextWord();
}

// Synchronizace hodnocen√≠ s Firestore
async function syncRatingsWithFirestore() {
    const ratings = JSON.parse(localStorage.getItem('ratings')) || [];
    if (ratings.length === 0) return;

    try {
        for (let rating of ratings) {
            await addDoc(collection(db, "ratings"), rating);

            // Aktualizace poƒçtu hodnocen√≠ v kolekci adjectives
            const wordRef = doc(db, "adjectives", rating.wordId);
            await updateDoc(wordRef, { evaluations: increment(1) });
        }

        localStorage.removeItem("ratings"); // Vyƒçi≈°tƒõn√≠ po synchronizaci
        console.log("Hodnocen√≠ byla √∫spƒõ≈°nƒõ synchronizov√°na s Firestore.");
    } catch (error) {
        console.error("Chyba p≈ôi synchronizaci hodnocen√≠:", error);
    }
}

// Dal≈°√≠ slovo
function nextWord() {
    currentWordIndex++;
    if (currentWordIndex < totalAdjectives) {
        displayWord();
    } else {
        document.getElementById("adjectiveDisplay").innerHTML = `<h2>Dƒõkujeme za √∫ƒçast!</h2><p>V p≈ô√≠padƒõ dotaz≈Ø mƒõ kontaktujte na Matias.Bunnik.s01@osu.cz</p>`;
        submitRatingsToFirestore();
    }
}

// Set up event listeners for rating buttons
function setupEventListeners() {
    const arousalButtons = document.querySelectorAll(".control-group:nth-child(1) .rating-button");
    const valenceButtons = document.querySelectorAll(".control-group:nth-child(2) .rating-button");

    arousalButtons.forEach(button => {
        button.addEventListener("click", () => {
            currentArousal = button.innerText.toLowerCase();
            highlightButton(button);
        });
        button.addEventListener("touchstart", () => {
            currentArousal = button.innerText.toLowerCase();
            highlightButton(button);
        });
    });

    valenceButtons.forEach(button => {
        button.addEventListener("click", () => {
            currentValence = button.innerText.toLowerCase();
            highlightButton(button);
        });
        button.addEventListener("touchstart", () => {
            currentValence = button.innerText.toLowerCase();
            highlightButton(button);
        });
    });
}

// Zv√Ωraznƒõn√≠ vybran√©ho tlaƒç√≠tka
function highlightButton(button) {
    const buttons = button.parentElement.querySelectorAll('.rating-button');
    buttons.forEach(btn => btn.classList.remove('selected'));
    button.classList.add('selected');
    button.parentElement.dataset.selectedValue = button.dataset.value; // Nastaven√≠ dataset.selectedValue
}

// Funkce setupConfirmButton
function setupConfirmButton() {
    const confirmButton = document.querySelector('.confirmation-button');
    if (confirmButton) {
        confirmButton.addEventListener('click', () => {
            if (currentValence && currentArousal) {
                rateWord(currentValence, currentArousal);
                showFeedbackMessage("Dƒõkujeme za va≈°e hodnocen√≠!");
                clearSelections();
            } else {
                displayErrorMessage("Pros√≠m, vyberte hodnocen√≠ pro valenci a arousal p≈ôed potvrzen√≠m.");
            }
        });
    }
}

// Vymaz√°n√≠ zv√Ωraznƒõn√≠ po potvrzen√≠
function clearSelections() {
    const selectedButtons = document.querySelectorAll('.rating-button.selected');
    selectedButtons.forEach(button => button.classList.remove('selected'));
}

// Zobrazen√≠ zpƒõtn√© vazby
function showFeedbackMessage(message) {
    alert(message);
}

// Zobrazen√≠ chybov√© zpr√°vy
function displayErrorMessage(message) {
    alert(message);
}

document.addEventListener("DOMContentLoaded", () => {
    const confirmPracticeButton1 = document.getElementById("confirmPracticeButton1");
    const confirmPracticeButton2 = document.getElementById("confirmPracticeButton2");

    if (confirmPracticeButton1) {
        confirmPracticeButton1.addEventListener("click", confirmPracticeRating);
    }

    if (confirmPracticeButton2) {
        confirmPracticeButton2.addEventListener("click", confirmPracticeRating);
    }
});

// P≈ôid√°n√≠ JavaScript k√≥du pro zv√Ωraznƒõn√≠ vybran√Ωch tlaƒç√≠tek a zobrazen√≠ potvrzovac√≠ zpr√°vy
function selectOption(button) {
    // Resetuje v√Ωbƒõr ve skupinƒõ tlaƒç√≠tek
    const buttons = button.parentElement.querySelectorAll('.rating-button');
    buttons.forEach(btn => btn.classList.remove('selected'));

    // Zv√Ωrazn√≠ vybranou mo≈ænost
    button.classList.add('selected');
    button.parentElement.dataset.selectedValue = button.dataset.value; // Nastaven√≠ dataset.selectedValue
}

// Ujist√≠me se, ≈æe funkce je dostupn√° v `window`
window.selectOption = selectOption;

function confirmPracticeRating() {
    const practiceContainers = document.querySelectorAll('.practiceWordContainer');
    let allRated = true;

    practiceContainers.forEach(container => {
        const arousalGroup = container.querySelector('.control-group:nth-child(2)'); // Opraveno na spr√°vn√Ω index
        const valenceGroup = container.querySelector('.control-group:nth-child(1)'); // Opraveno na spr√°vn√Ω index

        if (!arousalGroup.dataset.selectedValue || !valenceGroup.dataset.selectedValue) {
            allRated = false;
        }
    });

    if (allRated) {
        showVisualFeedback('Hodnocen√≠ testovac√≠ch slov "≈†≈•astn√Ω" a "Smutn√Ω" bylo √∫spƒõ≈°nƒõ potvrzeno. Nyn√≠ m≈Ø≈æete pokraƒçovat k dotazn√≠ku.');
    } else {
        showVisualFeedback('Pros√≠m, ohodno≈•te obƒõ testovac√≠ slova "≈†≈•astn√Ω" a "Smutn√Ω" p≈ôed potvrzen√≠m.');
    }
}

// Funkce pro zobrazen√≠ vizu√°ln√≠ zpƒõtn√© vazby
function showVisualFeedback(message) {
    const feedbackElement = document.createElement('div');
    feedbackElement.className = 'feedback-message';
    feedbackElement.innerText = message;
    document.body.appendChild(feedbackElement);

    setTimeout(() => {
        feedbackElement.remove();
    }, 3000);
}

// Explicitnƒõ nastaven√≠ funkc√≠ do window
window.selectOption = selectOption;
window.confirmPracticeRating = confirmPracticeRating;

// Vol√°n√≠ synchronizace p≈ôi naƒçten√≠ str√°nky
window.addEventListener('load', syncRatingsWithFirestore);

async function submitRatingsToFirestore() {
    const ratings = JSON.parse(localStorage.getItem('ratings')) || [];
    if (ratings.length === 0) return;

    console.log("Odes√≠l√°n√≠ hodnocen√≠ do Firestore:", ratings);

    for (const rating of ratings) {
        try {
            await addDoc(collection(db, "ratings"), rating);
        } catch (error) {
            console.error("Chyba p≈ôi odes√≠l√°n√≠ hodnocen√≠:", error);
        }
    }

    // Vyma≈æeme localStorage po odesl√°n√≠
    localStorage.removeItem('ratings');

    // Zobrazen√≠ mod√°ln√≠ho okna
    const modal = document.getElementById('modal');
    if (modal) {
        modal.style.display = 'block';
    }
}
